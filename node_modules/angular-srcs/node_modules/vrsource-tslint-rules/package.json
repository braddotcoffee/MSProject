{
  "_args": [
    [
      {
        "raw": "vrsource-tslint-rules@https://registry.npmjs.org/vrsource-tslint-rules/-/vrsource-tslint-rules-0.14.1.tgz",
        "scope": null,
        "escapedName": "vrsource-tslint-rules",
        "name": "vrsource-tslint-rules",
        "rawSpec": "https://registry.npmjs.org/vrsource-tslint-rules/-/vrsource-tslint-rules-0.14.1.tgz",
        "spec": "https://registry.npmjs.org/vrsource-tslint-rules/-/vrsource-tslint-rules-0.14.1.tgz",
        "type": "remote"
      },
      "/home/bwbonanno/Documents/Websites/Confessions/SourceCode/node_modules/angular-srcs"
    ]
  ],
  "_from": "vrsource-tslint-rules@latest",
  "_id": "vrsource-tslint-rules@0.14.1",
  "_inCache": true,
  "_location": "/angular-srcs/vrsource-tslint-rules",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vrsource-tslint-rules@https://registry.npmjs.org/vrsource-tslint-rules/-/vrsource-tslint-rules-0.14.1.tgz",
    "scope": null,
    "escapedName": "vrsource-tslint-rules",
    "name": "vrsource-tslint-rules",
    "rawSpec": "https://registry.npmjs.org/vrsource-tslint-rules/-/vrsource-tslint-rules-0.14.1.tgz",
    "spec": "https://registry.npmjs.org/vrsource-tslint-rules/-/vrsource-tslint-rules-0.14.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [],
  "_resolved": "https://registry.npmjs.org/vrsource-tslint-rules/-/vrsource-tslint-rules-0.14.1.tgz",
  "_shasum": "76321d37799da13ee28bca1ad14bb358bd122637",
  "_shrinkwrap": null,
  "_spec": "vrsource-tslint-rules@https://registry.npmjs.org/vrsource-tslint-rules/-/vrsource-tslint-rules-0.14.1.tgz",
  "_where": "/home/bwbonanno/Documents/Websites/Confessions/SourceCode/node_modules/angular-srcs",
  "bugs": {
    "url": "https://github.com/vrsource/vrsource-tslint-rules/issues"
  },
  "dependencies": {
    "tslint": "^3.6.0"
  },
  "description": "Extension rules for tslint",
  "devDependencies": {
    "typescript": "^1.8.10"
  },
  "homepage": "https://github.com/vrsource/vrsource-tslint-rules#readme",
  "keywords": [
    "eslint",
    "tslint",
    "custom-rules",
    "rules",
    "stylish",
    "lint",
    "linting",
    "linter",
    "tslint-plugin"
  ],
  "license": "MIT",
  "name": "vrsource-tslint-rules",
  "optionalDependencies": {},
  "readme": "# Purpose\n\nThis project includes a variety of tslint rules we have found useful for our projects.\n\n# Usage\n\nInstall from npm to your devDependencies  (https://www.npmjs.com/package/vrsource-tslint-rules)\n\n```\nnpm install --save-dev vrsource-tslint-rules\n```\n\nConfigure tslint to use the vrsource-tslint-rules folder:\n\nAdd the following path to the `rulesDirectory` setting in your `tslint.json` file:\n\n```\n{\n   \"rulesDirectory\": [\"node_modules/vrsource-tslint-rules/rules\"]\n   \"rules\": {\n     ...\n   }\n}\n```\n\nNow configure some of the new rules.\n\n# Rules\n\n## conditional-expression-parens\n\nRule to enforce the use of parentheses each clause of a conditional when they\nare not simple expressions of a single indentifier or calling expression.\n\n```javascript\n\"conditional-expression-parens\": true\n```\n\n## dot-notation-rule\n\nIn JavaScript, one can access properties using the dot notation (foo.bar)\nor square-bracket notation (foo[\"bar\"]). However, the dot notation is\noften preferred because it is easier to read, less verbose, and works\nbetter with aggressive JavaScript minimizers.\n\nThis rule is aimed at maintaining code consistency and improving code\nreadability by encouraging use of the dot notation style whenever possible.\nAs such, it will warn when it encounters an unnecessary use\nof square-bracket notation.\n\nSee: http://eslint.org/docs/rules/dot-notation\n\n```javascript\n\"dot-notation\": [\n    true,\n    { \"allow-pattern\": \"^[a-z]+(_[a-z]+)+$\" }\n]\n```\n\n## ext-variable-name\n\nThis rule provides extensive support for customizing allowable variable names\nfor a wide variety of variable tags.  The rule is configured by setting up a\nlist of sub-rules that specify the tags of variables to check and the checks\nto perform on the variable's name.  The sub-rules are checked in order\nand the first one that matches the tags of variable being checked is the\nonly one that is used.\n\nAn example set of sub-rules for an example coding standard is shown below.\n\n```json\n\"ext-variable-name\": [\n   true,\n   [\"class\",                 \"pascal\"],\n   [\"interface\",             \"pascal\", {\"regex\": \"^I.*$\"}],\n   [\"parameter\",             \"camel\"],\n   [\"property\", \"static\",    \"camel\", {\"regex\": \"^s.*$\"}],\n   [\"property\", \"private\",   \"camel\", \"allow-leading-underscore\"],\n   [\"property\", \"protected\", \"camel\", \"allow-leading-underscore\"],\n   [\"variable\", \"local\",     \"snake\"],\n   [\"variable\", \"const\",     \"upper\"],\n   [\"variable\",              \"camel\", {\"regex\": \"^g.*$\"}],\n   [\"method\", \"private\",     \"camel\", \"allow-leading-underscore\"],\n   [\"method\", \"protected\",   \"camel\", \"allow-leading-underscore\"],\n   [\"function\",              \"camel\"],\n   [\"default\",               \"camel\"]\n]\n```\n\nAllowed tags for variables:\n   * primary (choose one):\n      * class, interface, parameter, property,\n        method, function, variable\n   * modifiers (choose zero or more):\n      * local, const, static, public, protected, private\n\nnote: If any tags is added to a sub-rule then **all** must match the variable.\n\nChecks allowed:\n   * One of:\n      * \"camel\": Require variables to use camelCaseVariables\n      * \"snake\": Require variables to use snake_case_variables\n      * \"pascal\": Require variables to use PascalCaseVariables\n      * \"upper\": Require variables to use UPPER_CASE_VARIABLES\n   * \"allow-leading-underscore\": permits the variable to have a leading underscore\n   * \"allow-trailing-underscore\": permits the variable to have a trailing underscore\n   * \"ban-keywords\": bans a list of language keywords from being used\n   * {\"regex\": \"^.*$\"}: checks the variable name against the given regex\n\n## literal-spacing\n\nRule to enforce consistent spacing inside array and object literals.\n\nSee: eslint: object-curly-spacing and array-bracket-spacing\n\n```javascript\n\"literal-spacing\": [\n    true,\n    {\n        \"array\": [\"always\"],\n        \"object\": [\"never\"],\n        \"import\": [\"always\"]\n    }\n]\n```\n\n## max-params\n\nRule to enforce a maximum number of parameters for functions and methods.\n\n```javascript\n\"max-params\": [\n    true,\n    3\n]\n```\n\n## multiline-arrow\n\nRule to enforce various checks arrow functions that span multiple lines.\n\n```javascript\n\"multiline-arrow\": [\n    true,\n    \"require-parens\",\n    \"require-block\"\n]\n```\n\n## no-duplicate-imports\n\nThis rule validates that all imports from a\nsingle module exist in a single import statement;\n\nSee: http://eslint.org/docs/rules/no-duplicate-imports\n\n```javascript\n\"no-duplicate-imports\": true\n```\n\n## no-param-reassign\n\nFlag any place where a function parameter is assigned\na value in the body of a function.\n\nSee: eslint no-param-reassign\n\n```javascript\n\"no-param-reassign\": true\n```\n\nNote: for this rule to work correctly you also need to use `no-shadowed-variable`\n\n## no-jasmine-focus\n\nFlags any place developers left fit or fdescribe calls in their code.\n\n```javascript\n\"no-jasmine-focus\": true\n```\n\n## prefer-case-blocks\n\nThis rule checks to make sure that all case clauses use a block\naround the statements of the case.  This helps to protect against\nissues with lexcical declarations that would become visible to the\nentire switch statement.\n\nTo maintain consistency, the rule requires a block in all cases.\n\n```javascript\n\"prefer-case-blocks\": true\n```\n\n## prefer-const\n\nPrefer the use of const keyword instead of let for values that are never assigned to\n\n```json\n\"prefer-const\": true\n```\n\nnote: this rule is copied from the typescript project.\n\n\n## prefer-literal\n\nFlags locations where code calls \"new Object()\", \"new Array()\", \"new Function()\"\"\n\n```javascript\n\"prefer-literal\": [\n    true,\n    \"object\",\n    \"function\",\n    \"array\"\n]\n```\n\n# Changelog\n\n  * 0.14.1\n    * Add import options to literal-spacing rule\n  * 0.13.1\n    * Fix bugs in ext-variable-name rule.\n       * variables in constructors didn't get the 'local' tag\n       * variables could end up with 'public' tag that were not\n         properties or methods\n  * 0.13.0\n    * Add no-jasmine-focus rule.\n  * 0.12.1\n    * Fix bug in dot-notation where invalid identifiers were not allowed.\n  * 0.12.0\n    * Added literal-spacing rule\n  * 0.11.0\n    * Added no-param-reassign rule\n  * 0.10.0\n    * Added prefer-case-blocks rule\n  * 0.9.0\n    * Add dot-notation rule\n  * 0.8.0\n    * Add conditional-expression-parens rule\n  * 0.7.0\n    * Add prefer-literal rule\n  * 0.6.0\n    * Add max-params rule\n  * 0.5.0\n    * Add no-duplicate-imports\n  * 0.4.0\n    * Add multiline-arrow rule\n  * 0.3.0\n    * Add prefer-const rule\n  * 0.2.0\n    * Remove demonstration rule\n  * 0.1.0\n    * First version\n\n# Contributing\n\nContributions are greatly appreciated.  Please fork the repository and submit a pull request.\n\n# Development\n\n## Development steps\n\nThe run_tests.sh script will run the tests locally.\n\nTo add a new rule:\n  - Add the rule's .ts file to the /rules directory\n  - Add one or more tests in the test/rules directory\n  - Use run_tests.sh to build and run the tests\n  - (optional) The .vscode directory includes settings to run and debug rules in vscode.\n     - Just modify the \"args\" entry to point to the rule test case to run\n\nNotes for how to build new rules and tests:\n\n  - http://palantir.github.io/tslint/develop/custom-rules/\n     - https://github.com/palantir/tslint/blob/master/src/language/walker/syntaxWalker.ts\n  - http://palantir.github.io/tslint/develop/testing-rules/\n\n## Resources\n\n  * AST explorer: https://astexplorer.net/\n  * Typescript Compiler API: https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API\n  * AST Dive:  https://basarat.gitbooks.io/typescript/content/docs/compiler/ast.html\n\n## Example Rules\n\n  * Typescript project rules: https://github.com/Microsoft/TypeScript/pull/4458\n  * https://github.com/mgechev/codelyzer\n  * https://github.com/Microsoft/tslint-microsoft-contrib\n  * https://github.com/buzinas/tslint-eslint-rules\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vrsource/vrsource-tslint-rules.git"
  },
  "version": "0.14.1"
}
