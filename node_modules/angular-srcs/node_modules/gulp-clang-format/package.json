{
  "_args": [
    [
      {
        "raw": "gulp-clang-format@https://registry.npmjs.org/gulp-clang-format/-/gulp-clang-format-1.0.23.tgz",
        "scope": null,
        "escapedName": "gulp-clang-format",
        "name": "gulp-clang-format",
        "rawSpec": "https://registry.npmjs.org/gulp-clang-format/-/gulp-clang-format-1.0.23.tgz",
        "spec": "https://registry.npmjs.org/gulp-clang-format/-/gulp-clang-format-1.0.23.tgz",
        "type": "remote"
      },
      "/home/bwbonanno/Documents/Websites/Confessions/SourceCode/node_modules/angular-srcs"
    ]
  ],
  "_from": "gulp-clang-format@>=1.0.23 <2.0.0",
  "_id": "gulp-clang-format@1.0.23",
  "_inCache": true,
  "_location": "/angular-srcs/gulp-clang-format",
  "_phantomChildren": {
    "core-util-is": "1.0.2",
    "inherits": "2.0.1",
    "process-nextick-args": "1.0.6",
    "string_decoder": "0.10.31",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "raw": "gulp-clang-format@https://registry.npmjs.org/gulp-clang-format/-/gulp-clang-format-1.0.23.tgz",
    "scope": null,
    "escapedName": "gulp-clang-format",
    "name": "gulp-clang-format",
    "rawSpec": "https://registry.npmjs.org/gulp-clang-format/-/gulp-clang-format-1.0.23.tgz",
    "spec": "https://registry.npmjs.org/gulp-clang-format/-/gulp-clang-format-1.0.23.tgz",
    "type": "remote"
  },
  "_requiredBy": [],
  "_resolved": "https://registry.npmjs.org/gulp-clang-format/-/gulp-clang-format-1.0.23.tgz",
  "_shasum": "fe258586b83998491e632fc0c4fc0ecdfa10c89f",
  "_shrinkwrap": null,
  "_spec": "gulp-clang-format@https://registry.npmjs.org/gulp-clang-format/-/gulp-clang-format-1.0.23.tgz",
  "_where": "/home/bwbonanno/Documents/Websites/Confessions/SourceCode/node_modules/angular-srcs",
  "bugs": {
    "url": "https://github.com/angular/gulp-clang-format/issues"
  },
  "contributors": [
    {
      "name": "Alex Eagle",
      "email": "alexeagle@google.com",
      "url": "https://angularjs.org/"
    },
    {
      "name": "Martin Probst",
      "email": "martinprobst@google.com",
      "url": "https://angularjs.org/"
    }
  ],
  "dependencies": {
    "clang-format": "^1.0.32",
    "gulp-diff": "^1.0.0",
    "gulp-util": "^3.0.4",
    "pkginfo": "^0.3.0",
    "stream-combiner2": "^1.1.1",
    "stream-equal": "0.1.6",
    "through2": "^0.6.3"
  },
  "description": "Checks that code is properly formatted",
  "devDependencies": {
    "gulp": "^3.8.11"
  },
  "homepage": "https://github.com/angular/gulp-clang-format#readme",
  "license": "Apache-2.0",
  "main": "index.js",
  "name": "gulp-clang-format",
  "optionalDependencies": {},
  "readme": "# gulp-clang-format\nGulp plugin to check that code is properly formatted, according to clang-format.\n\nIf the code differs from how clang-format would format it, this prints a warning\nto the build output, as well as a command to run that formats the file in-place.\n\n## Usage\n\nSample gulpfile.js:\n\n```js\nvar format = require('gulp-clang-format');\n\ngulp.task('check-format', function() {\n  return gulp.src('*.js')\n     .pipe(format.checkFormat());\n});\n\ngulp.task('format', function() {\n  return gulp.src('*.js')\n      .pipe(format.format())\n      .pipe(gulp.dest('formatted'));\n});\n```\n\n\n### Promoting warnings to errors\nIf you want to enforce the formatting, so that other team members don't introduce\ncode that gives you a warning, you can turn them into build errors by acting on\nthe 'warning' event. For example, this task exits the build immediately:\n\n```js\nvar format = require('gulp-clang-format');\n\ngulp.task('check-format', function() {\n  return gulp.src('*.js')\n      .pipe(format.checkFormat('file'))\n      .on('warning', function(e) {\n        process.stdout.write(e.message);\n        process.exit(1);\n      });\n});\n```\n\n## Options\nThe `format()` and `checkFormat()` both accept two options: `opt_clangStyle` and\n`opt_clangFormat`. `checkFormat()` also accepts a third option,\n`opt_gulpOptions`.\n\n### opt_clangStyle\nAn optional parameter indicating the clang-format style to use. By default, it\napplies the \"Google\" style.\n\nThe parameter is passed to the -style argument of clang-format. See the docs\nhere: http://clang.llvm.org/docs/ClangFormatStyleOptions.html\n\nThe recommended value is the string 'file', this means that clang-format will\nlook for a .clang-format file in your repository. This allows you to keep the\nformatting consistent with other developers.\n\n### opt_clangFormat\nThe resolved `clang-format` module to use. Useful to pass a specific\n`clang-format` version to the task.\n\n```js\nvar format = require('gulp-clang-format');\nvar clangFormat = require('clang-format');\n\ngulp.task('check-format', function() {\n  return gulp.src('*.js')\n      .pipe(format.checkFormat('file', clangFormat));\n});\n```\n\n### opt_gulpOptions\nOptions for the gulp operation. Supported options are\n\n* `verbose`, which causes a diff of all changed files to be printed.\n* `fail`, which causes the task to emit an `error` instead of a `warning`.\n\n```js\nvar format = require('gulp-clang-format');\n\ngulp.task('check-format', function() {\n  return gulp.src('*.js')\n      .pipe(format.checkFormat(undefined, undefined, {verbose: true, fail: true}));\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/angular/gulp-clang-format.git"
  },
  "scripts": {
    "test": "gulp test"
  },
  "version": "1.0.23"
}
