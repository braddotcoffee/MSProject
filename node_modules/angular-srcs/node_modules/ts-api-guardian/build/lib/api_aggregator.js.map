{"version":3,"sources":["api_aggregator.ts"],"names":["Base","Base.constructor","Base.mapNodes","PublicApiAggregator","PublicApiAggregator.constructor","PublicApiAggregator.mapNode","PublicApiAggregator.shouldBeSkipped","PublicApiAggregator.getFunctionLike","PublicApiAggregator.getConstructor","PublicApiAggregator.getConstructorProperties","PublicApiAggregator.getGetter","PublicApiAggregator.getSetter","PublicApiAggregator.getProperty","PublicApiAggregator.getParameters","PublicApiAggregator.getParameter","PublicApiAggregator.getClassLike","PublicApiAggregator.getColonType","TypeExtract","TypeExtract.constructor","TypeExtract.mapNode","typeToString","typesToString","hasFlag","reportError","flatten","getName","getOptional","getType","getInitializer","removeSpaces"],"mappings":"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","file":"api_aggregator.js","sourcesContent":["import * as ts from 'typescript';\n\nexport abstract class Base<T> {\n  abstract mapNode(n: ts.Node): T;\n\n  mapNodes(nodes: ts.Node[]): T[] { return nodes ? nodes.map((n) => this.mapNode(n)) : []; }\n}\n\nexport default class PublicApiAggregator extends Base<string[]> {\n  mapNode(node: ts.Node): string[] {\n    switch (node.kind) {\n      case ts.SyntaxKind.VariableDeclaration:\n        const varDecl = <ts.VariableDeclaration>node;\n        const name = getName(node);\n        const isConst = hasFlag(varDecl.parent, ts.NodeFlags.Const);\n        const type = this.getColonType(node);\n        return [`${isConst ? 'const' : 'var'} ${name}${type}`];\n\n      case ts.SyntaxKind.ClassDeclaration:\n        const classDecl = <ts.ClassDeclaration>node;\n        return this.getClassLike('class', classDecl);\n\n      case ts.SyntaxKind.EnumDeclaration:\n        const enumDecl = <ts.ClassDeclaration>node;\n        return this.getClassLike('enum', enumDecl);\n\n      case ts.SyntaxKind.EnumMember:\n        return [getName(node)];\n\n      case ts.SyntaxKind.InterfaceDeclaration:\n        const ifDecl = <ts.InterfaceDeclaration>node;\n        return this.getClassLike('interface', ifDecl);\n\n      case ts.SyntaxKind.MethodDeclaration:\n        if (this.shouldBeSkipped(node)) return [];\n        return [this.getFunctionLike(<ts.MethodDeclaration>node)];\n\n      case ts.SyntaxKind.PropertyDeclaration:\n        if (this.shouldBeSkipped(node)) return [];\n        return [this.getProperty(<ts.PropertyDeclaration>node)];\n\n      case ts.SyntaxKind.Constructor:\n        return [\n          this.getConstructor(<ts.ConstructorDeclaration>node),\n          ...this.getConstructorProperties(<ts.ConstructorDeclaration>node)\n        ];\n\n      case ts.SyntaxKind.PropertySignature:\n        return [this.getProperty(<ts.PropertyDeclaration>node)];\n\n      case ts.SyntaxKind.MethodSignature:\n        return [this.getFunctionLike(<ts.MethodDeclaration>node)];\n\n      case ts.SyntaxKind.GetAccessor:\n        if (this.shouldBeSkipped(node)) return [];\n        return [this.getGetter(<ts.AccessorDeclaration>node)];\n\n      case ts.SyntaxKind.SetAccessor:\n        if (this.shouldBeSkipped(node)) return [];\n        return [this.getSetter(<ts.AccessorDeclaration>node)];\n\n      case ts.SyntaxKind.FunctionDeclaration:\n        return [this.getFunctionLike(<ts.FunctionDeclaration>node)];\n\n      default:\n        return [];\n    }\n  }\n\n  private shouldBeSkipped(decl: ts.Node): boolean {\n    const name = (<any>decl).name;\n    if (name.kind === ts.SyntaxKind.ComputedPropertyName) {\n      return true;\n    }\n    const n = getName(decl);\n    return hasFlag(decl.modifiers, ts.NodeFlags.Private) || n[0] == '_';\n  }\n\n  private getFunctionLike(node: ts.FunctionLikeDeclaration): string {\n    const name = getName(node);\n    const params = this.getParameters(node.parameters);\n    const retType = this.getColonType(node);\n    return `${name}(${params})${retType}`;\n  }\n\n  private getConstructor(node: ts.FunctionLikeDeclaration): string {\n    const params = this.getParameters(node.parameters);\n    return `constructor(${params})`;\n  }\n\n  private getConstructorProperties(node: ts.FunctionLikeDeclaration): string[] {\n    const properties: string[] = [];\n    node.parameters.forEach(p => {\n      let includeProp = false;\n      let accessModifier = '';  // we default to \"\" and not print \"public\" for public properties\n      if (hasFlag(p, ts.NodeFlags.Public)) {\n        includeProp = true;\n      } else if (hasFlag(p, ts.NodeFlags.Protected)) {\n        includeProp = true;\n        accessModifier = '//protected';\n      }\n\n      if (includeProp) {\n        properties.push(`${this.getParameter(p)} ${accessModifier}`.trim());\n      }\n    });\n    return properties;\n  }\n\n  private getGetter(node: ts.AccessorDeclaration): string {\n    const name = getName(node);\n    const type = this.getColonType(node);\n    return `${name}${type}`;\n  }\n\n  private getSetter(node: ts.AccessorDeclaration): string {\n    const name = getName(node);\n    const params = this.getParameters(node.parameters);\n    return `${name}=(${params})`;\n  }\n\n  private getProperty(decl: ts.PropertyDeclaration): string {\n    const name = getName(decl);\n    const type = this.getColonType(decl);\n    return `${name}${type}`;\n  }\n\n  private getParameters(nodes: ts.NodeArray<ts.ParameterDeclaration>): string {\n    return nodes.map(p => this.getParameter(p)).join(', ');\n  }\n\n  private getParameter(node: ts.ParameterDeclaration): string {\n    return `${getName(node)}${getOptional(node)}:${getType(node)}${getInitializer(node)}`;\n  }\n\n  private getClassLike(keyword: string, decl: ts.ClassDeclaration|ts.InterfaceDeclaration):\n      string[] {\n    const name = getName(decl);\n    const typeParams = typesToString(decl.typeParameters);\n    const nameWithTypes = typeParams ? `${name}<${typeParams}>` : name;\n    const members = this.mapNodes(decl.members);\n    return [nameWithTypes].concat(flatten(members).map(m => `${name}.${m}`));\n  }\n\n  private getColonType(node: ts.Node): string {\n    const type = getType(node);\n    return type ? `:${type}` : '';\n  }\n}\n\nclass TypeExtract extends Base<string> {\n  mapNode(node: ts.Node): string {\n    switch (node.kind) {\n      case ts.SyntaxKind.TypeLiteral:\n        let members = (<ts.TypeLiteralNode>node).members;\n        const strMembers = [];\n        for (let i = 0; i < members.length; ++i) {\n          let member = members[i];\n          const name = getName(member);\n          const question = !!(<any>member).questionToken;\n          const type = getType(member);\n          strMembers.push(`${name}${question ? '?' : ''}:${type}`);\n        }\n        return `{${strMembers.join(\", \")}}`;\n\n      case ts.SyntaxKind.UnionType:\n        return this.mapNodes((<ts.UnionTypeNode>node).types).join('|');\n\n      case ts.SyntaxKind.TypeReference:\n        const typeRef = <ts.TypeReferenceNode>node;\n        const name = this.mapNode(typeRef.typeName);\n        const typeParams =\n            typeRef.typeArguments ? this.mapNodes(typeRef.typeArguments).join(', ') : null;\n        return typeParams ? `${name}<${typeParams}>` : name;\n\n      case ts.SyntaxKind.TypeParameter:\n        const typeParam = <ts.TypeParameterDeclaration>node;\n        return this.mapNode(typeParam.name);\n\n      case ts.SyntaxKind.ArrayType:\n        const type = this.mapNode((<ts.ArrayTypeNode>node).elementType);\n        return `${type}[]`;\n\n      case ts.SyntaxKind.TupleType:\n        const types = this.mapNodes((<ts.TupleTypeNode>node).elementTypes);\n        return `[${types.join(', ')}]`;\n\n      case ts.SyntaxKind.FunctionType:\n        return node.getText();\n\n      case ts.SyntaxKind.QualifiedName:\n        var first = <ts.QualifiedName>node;\n        return this.mapNode(first.right);\n\n      case ts.SyntaxKind.Identifier:\n        var ident = <ts.Identifier>node;\n        return ident.text;\n\n      case ts.SyntaxKind.NumberKeyword:\n        return 'number';\n\n      case ts.SyntaxKind.StringKeyword:\n        return 'string';\n\n      case ts.SyntaxKind.VoidKeyword:\n        return 'void';\n\n      case ts.SyntaxKind.BooleanKeyword:\n        return 'boolean';\n\n      case ts.SyntaxKind.AnyKeyword:\n        return 'any';\n\n      default:\n        return 'unknown';\n    }\n  }\n}\n\nfunction typeToString(node: ts.Node): string {\n  return node ? new TypeExtract().mapNode(node) : null;\n}\n\nfunction typesToString(nodes: ts.Node[]): string {\n  return nodes ? new TypeExtract().mapNodes(nodes).join(',') : null;\n}\n\nfunction hasFlag(n: {flags: number}, flag: ts.NodeFlags): boolean {\n  return n && (n.flags & flag) !== 0 || false;\n}\n\nfunction reportError(n: ts.Node, message: string) {\n  const file = n.getSourceFile();\n  const fileName = file.fileName;\n  const start = n.getStart(file);\n  const pos = file.getLineAndCharacterOfPosition(start);\n  // Line and character are 0-based.\n  const fullMessage = `${fileName}:${pos.line + 1}:${pos.character + 1}: ${message}`;\n  throw new Error(fullMessage);\n}\n\nfunction flatten<T>(nestedArray: T[][]): T[] {\n  return nestedArray.reduce((a, b) => a.concat(b), []);\n}\n\nfunction getName(node: ts.Node): string {\n  const name = (<any>node).name;\n  if (name) {\n    return removeSpaces(name.getText());\n  } else if (node.kind === ts.SyntaxKind.IndexSignature) {\n    const sig = <ts.IndexSignatureDeclaration>node;\n    return `[${removeSpaces(sig.parameters[0].getText())}]`;\n  } else {\n    reportError(node, 'Cannot get name');\n  }\n}\n\nfunction getOptional(node: ts.ParameterDeclaration): string {\n  return (node.questionToken) ? '?' : '';\n}\n\nfunction getType(node: ts.Node): string {\n  const t = typeToString((<any>node).type);\n  return t ? t : 'any';\n}\n\n\nfunction getInitializer(node: ts.ParameterDeclaration): string {\n  if (node.initializer) {\n    return '=' + node.initializer.getText();\n  } else {\n    return '';\n  }\n}\n\nfunction removeSpaces(s: string): string {\n  return s.replace(/\\s+/g, '');\n}\n"],"sourceRoot":"/source/"}