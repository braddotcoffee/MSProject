{"version":3,"sources":["cli.ts"],"names":["startCli","parseArguments","printUsageAndExit","generateFileNamePairs"],"mappings":"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A,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA;QACTA,MAAMA,CAACA,EAACA,MAAAA,IAAIA,EAAEA,IAAIA,EAAEA,MAAMA,EAAEA,QAAAA,MAAMA,EAACA,CAACA;IACtCA,CAACA;IAEDA,IAAIA,KAAKA,GAAaA,EAAEA,CAACA;IAEzBA,EAAEA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA;QAChBA,KAAKA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;IACpBA,CAACA;IACDA,EAAEA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;QACnBA,KAAKA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;IACpBA,CAACA;IACDA,EAAEA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;QACnBA,KAAKA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;IACvBA,CAACA;IACDA,EAAEA,CAACA,CAACA,IAAIA,CAACA,WAAWA,CAACA,CAACA,CAACA,CAACA;QACtBA,KAAKA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;IACvBA,CAACA;IAEDA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA;QACnBA,MAAMA,CAACA,IAAIA,CAACA,0BAA0BA,CAACA,CAACA;QACxCA,KAAKA,GAAGA,CAACA,MAAMA,CAACA,CAACA;IACnBA,CAACA;IAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA,KAAKA,CAACA,MAAMA,KAAKA,CAACA,CAACA,CAACA,CAACA;QAC9BA,MAAMA,CAACA,IAAIA,CAACA,4CAA4CA,CAACA,CAACA;QAC1DA,KAAKA,GAAGA,CAACA,MAAMA,CAACA,CAACA;IACnBA,CAACA;IAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,MAAMA,GAAGA,CAACA,IAAIA,CAACA,IAAIA,CAACA,QAAQA,CAACA,IAAIA,CAACA,IAAIA,CAACA,WAAWA,CAACA,CAACA,CAACA,CAACA;QACtEA,MAAMA,CAACA,IAAIA,CAACA,0CAAwCA,KAAKA,CAACA,CAACA,CAACA,iBAAcA,CAACA,CAACA;QAC5EA,KAAKA,GAAGA,CAACA,MAAMA,CAACA,CAACA;IACnBA,CAACA;IAEDA,MAAMA,CAACA,EAACA,MAAAA,IAAIA,EAAEA,IAAIA,EAAEA,KAAKA,CAACA,CAACA,CAACA,EAAEA,QAAAA,MAAMA,EAACA,CAACA;AACxCA,CAACA;AA5De,sBAAc,iBA4D7B,CAAA;AAED,2BAA2B,KAAa;IAAbC,qBAAaA,GAAbA,aAAaA;IACtCA,IAAMA,KAAKA,GAAGA,KAAKA,GAAGA,OAAOA,CAACA,IAAIA,CAACA,IAAIA,CAACA,OAAOA,CAACA,GAAGA,OAAOA,CAACA,GAAGA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;IAC7EA,KAAKA,CAACA,aAAWA,GAAGA,uCACZA,GAAGA,8DACHA,GAAGA,iFAEHA,GAAGA,iEACHA,GAAGA,o7BAkBsCA,CAACA,CAACA;IACnDA,OAAOA,CAACA,IAAIA,CAACA,KAAKA,GAAGA,CAACA,GAAGA,CAACA,CAACA,CAACA;AAC9BA,CAACA;AAED,+BACI,IAAgB,EAAE,IAAY;IAChCC,EAAEA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;QACfA,MAAMA,CAACA,CAACA,EAACA,UAAUA,EAAEA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,UAAUA,EAAEA,IAAIA,CAACA,IAAIA,CAACA,EAACA,CAACA,CAACA;IAE3DA,CAACA;IAACA,IAAIA,CAACA,CAACA;QACNA,IAAIA,OAAOA,GAAGA,IAAIA,CAACA,SAASA,CAACA,IAAIA,GAAGA,CAACA;QACrCA,IAAMA,SAASA,GAAGA,IAAIA,CAACA,IAAIA,GAAGA,KAAKA,CAACA,CAACA;QAErCA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,GAAGA,CAACA,UAAAA,QAAQA;YACxBA,MAAMA,CAACA;gBACLA,UAAUA,EAAEA,QAAQA;gBACpBA,UAAUA,EAAEA,IAAIA,CAACA,IAAIA,CAACA,SAASA,EAAEA,IAAIA,CAACA,QAAQA,CAACA,OAAOA,EAAEA,QAAQA,CAACA,CAACA;aACnEA,CAACA;QACJA,CAACA,CAACA,CAACA;IACLA,CAACA;IACDA,MAAMA,CAACA,IAAIA,CAACA;AACdA,CAACA;AAjBe,6BAAqB,wBAiBpC,CAAA","file":"cli.js","sourcesContent":["import * as chalk from 'chalk';\nimport * as minimist from 'minimist';\nimport {ParsedArgs} from 'minimist';\nimport * as path from 'path';\n\nimport {SerializationOptions, generateGoldenFile, verifyAgainstGoldenFile} from './main';\n\n// Examples:\n//\n// ```sh\n// # Generate one declaration file\n// ts-api-guardian --out api_guard.d.ts index.d.ts\n//\n// # Generate multiple declaration files // # (output location like typescript)\n// ts-api-guardian --outDir api_guard [--rootDir .] core/index.d.ts core/testing.d.ts\n//\n// # Print usage\n// ts-api-guardian --help\n//\n// # Check against one declaration file\n// ts-api-guardian --verify api_guard.d.ts index.d.ts\n//\n// # Check against multiple declaration files\n// ts-api-guardian --verifyDir api_guard [--rootDir .] core/index.d.ts core/testing.d.ts\n// ```\n\nconst CMD = 'ts-api-guardian';\n\nexport function startCli() {\n  const {argv, mode, errors} = parseArguments(process.argv.slice(2));\n\n  const options: SerializationOptions = {\n    stripExportPattern: argv['stripExportPattern'],\n    allowModuleIdentifiers: [].concat(argv['allowModuleIdentifiers']),\n    onStabilityMissing: argv['onStabilityMissing'] || 'none'\n  };\n\n  if (['warn', 'error', 'none'].indexOf(options.onStabilityMissing) < 0) {\n    throw new Error(\n        'Argument for \"--onStabilityMissing\" option must be one of: \"warn\", \"error\", \"none\"');\n  }\n\n  for (const error of errors) {\n    console.warn(error);\n  }\n\n  if (mode === 'help') {\n    printUsageAndExit(!!errors.length);\n  } else {\n    const targets = generateFileNamePairs(argv, mode);\n\n    if (mode === 'out') {\n      for (const {entrypoint, goldenFile} of targets) {\n        generateGoldenFile(entrypoint, goldenFile, options);\n      }\n    } else {  // mode === 'verify'\n      let hasDiff = false;\n\n      for (const {entrypoint, goldenFile} of targets) {\n        const diff = verifyAgainstGoldenFile(entrypoint, goldenFile, options);\n        if (diff) {\n          hasDiff = true;\n          const lines = diff.split('\\n');\n          if (lines.length) {\n            lines.pop();  // Remove trailing newline\n          }\n          for (const line of lines) {\n            const chalkMap = {'-': chalk.red, '+': chalk.green, '@': chalk.cyan};\n            const chalkFunc = chalkMap[line[0]] || chalk.reset;\n            console.log(chalkFunc(line));\n          }\n        }\n      }\n\n      if (hasDiff) {\n        process.exit(1);\n      }\n    }\n  }\n}\n\nexport function parseArguments(input: string[]):\n    {argv: ParsedArgs, mode: string, errors?: string[]} {\n  let help = false;\n  const errors = [];\n\n  const argv = minimist(input, {\n    string: [\n      'out', 'outDir', 'verify', 'verifyDir', 'rootDir', 'stripExportPattern',\n      'allowModuleIdentifiers', 'onStabilityMissing'\n    ],\n    boolean: [\n      'help',\n      // Options used by chalk automagically\n      'color', 'no-color'\n    ],\n    alias: {'outFile': 'out', 'verifyFile': 'verify'},\n    unknown: option => {\n      if (option[0] === '-') {\n        errors.push(`Unknown option: ${option}`);\n        help = true;\n        return false;  // do not add to argv._\n      } else {\n        return true;  // add to argv._\n      }\n    }\n  });\n\n  help = help || argv['help'];\n\n  if (help) {\n    return {argv, mode: 'help', errors};\n  }\n\n  let modes: string[] = [];\n\n  if (argv['out']) {\n    modes.push('out');\n  }\n  if (argv['outDir']) {\n    modes.push('out');\n  }\n  if (argv['verify']) {\n    modes.push('verify');\n  }\n  if (argv['verifyDir']) {\n    modes.push('verify');\n  }\n\n  if (!argv._.length) {\n    errors.push('No input file specified.');\n    modes = ['help'];\n  } else if (modes.length !== 1) {\n    errors.push('Specify either --out[Dir] or --verify[Dir]');\n    modes = ['help'];\n  } else if (argv._.length > 1 && !argv['outDir'] && !argv['verifyDir']) {\n    errors.push(`More than one input specified. Use --${modes[0]}Dir instead.`);\n    modes = ['help'];\n  }\n\n  return {argv, mode: modes[0], errors};\n}\n\nfunction printUsageAndExit(error = false) {\n  const print = error ? console.warn.bind(console) : console.log.bind(console);\n  print(`Usage:  ${CMD} [options] <file ...>\n        ${CMD} --out <output file> <entrypoint .d.ts file>\n        ${CMD} --outDir <output dir> [--rootDir .] <entrypoint .d.ts files>\n\n        ${CMD} --verify <golden file> <entrypoint .d.ts file>\n        ${CMD} --verifyDir <golden file dir> [--rootDir .] <entrypoint .d.ts files>\n\nOptions:\n        --help                          Show this usage message\n\n        --out <file>                    Write golden output to file\n        --outDir <dir>                  Write golden file structure to directory\n\n        --verify <file>                 Read golden input from file\n        --verifyDir <dir>               Read golden file structure from directory\n\n        --rootDir <dir>                 Specify the root directory of input files\n\n        --stripExportPattern <regexp>   Do not output exports matching the pattern\n        --allowModuleIdentifiers <identifier>\n                                        Whitelist identifier for \"* as foo\" imports\n        --onStabilityMissing <warn|error|none>\n                                        Warn or error if an export has no stability\n                                        annotation`);\n  process.exit(error ? 1 : 0);\n}\n\nexport function generateFileNamePairs(\n    argv: ParsedArgs, mode: string): {entrypoint: string, goldenFile: string}[] {\n  if (argv[mode]) {\n    return [{entrypoint: argv._[0], goldenFile: argv[mode]}];\n\n  } else {  // argv[mode + 'Dir']\n    let rootDir = argv['rootDir'] || '.';\n    const goldenDir = argv[mode + 'Dir'];\n\n    return argv._.map(fileName => {\n      return {\n        entrypoint: fileName,\n        goldenFile: path.join(goldenDir, path.relative(rootDir, fileName))\n      };\n    });\n  }\n  return null;\n}\n"],"sourceRoot":"/source/"}